// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: services/multimedia/protocols/multimedia.proto

package protocols

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MultimediaService_VideoFrame_FullMethodName     = "/protocols.MultimediaService/VideoFrame"
	MultimediaService_VideoThumbnail_FullMethodName = "/protocols.MultimediaService/VideoThumbnail"
	MultimediaService_ImageThumbnail_FullMethodName = "/protocols.MultimediaService/ImageThumbnail"
	MultimediaService_ImageSize_FullMethodName      = "/protocols.MultimediaService/ImageSize"
	MultimediaService_ImageResize_FullMethodName    = "/protocols.MultimediaService/ImageResize"
)

// MultimediaServiceClient is the client API for MultimediaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MultimediaServiceClient interface {
	VideoFrame(ctx context.Context, in *VideoFrameRequest, opts ...grpc.CallOption) (*MultimediaResponse, error)
	VideoThumbnail(ctx context.Context, in *ThumbnailRequest, opts ...grpc.CallOption) (*MultimediaResponse, error)
	ImageThumbnail(ctx context.Context, in *ThumbnailRequest, opts ...grpc.CallOption) (*MultimediaResponse, error)
	ImageSize(ctx context.Context, in *ImageSizeRequest, opts ...grpc.CallOption) (*MultimediaResponse, error)
	ImageResize(ctx context.Context, in *ImageResizeRequest, opts ...grpc.CallOption) (*MultimediaResponse, error)
}

type multimediaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMultimediaServiceClient(cc grpc.ClientConnInterface) MultimediaServiceClient {
	return &multimediaServiceClient{cc}
}

func (c *multimediaServiceClient) VideoFrame(ctx context.Context, in *VideoFrameRequest, opts ...grpc.CallOption) (*MultimediaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultimediaResponse)
	err := c.cc.Invoke(ctx, MultimediaService_VideoFrame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multimediaServiceClient) VideoThumbnail(ctx context.Context, in *ThumbnailRequest, opts ...grpc.CallOption) (*MultimediaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultimediaResponse)
	err := c.cc.Invoke(ctx, MultimediaService_VideoThumbnail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multimediaServiceClient) ImageThumbnail(ctx context.Context, in *ThumbnailRequest, opts ...grpc.CallOption) (*MultimediaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultimediaResponse)
	err := c.cc.Invoke(ctx, MultimediaService_ImageThumbnail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multimediaServiceClient) ImageSize(ctx context.Context, in *ImageSizeRequest, opts ...grpc.CallOption) (*MultimediaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultimediaResponse)
	err := c.cc.Invoke(ctx, MultimediaService_ImageSize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multimediaServiceClient) ImageResize(ctx context.Context, in *ImageResizeRequest, opts ...grpc.CallOption) (*MultimediaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultimediaResponse)
	err := c.cc.Invoke(ctx, MultimediaService_ImageResize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MultimediaServiceServer is the server API for MultimediaService service.
// All implementations must embed UnimplementedMultimediaServiceServer
// for forward compatibility.
type MultimediaServiceServer interface {
	VideoFrame(context.Context, *VideoFrameRequest) (*MultimediaResponse, error)
	VideoThumbnail(context.Context, *ThumbnailRequest) (*MultimediaResponse, error)
	ImageThumbnail(context.Context, *ThumbnailRequest) (*MultimediaResponse, error)
	ImageSize(context.Context, *ImageSizeRequest) (*MultimediaResponse, error)
	ImageResize(context.Context, *ImageResizeRequest) (*MultimediaResponse, error)
	mustEmbedUnimplementedMultimediaServiceServer()
}

// UnimplementedMultimediaServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMultimediaServiceServer struct{}

func (UnimplementedMultimediaServiceServer) VideoFrame(context.Context, *VideoFrameRequest) (*MultimediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VideoFrame not implemented")
}
func (UnimplementedMultimediaServiceServer) VideoThumbnail(context.Context, *ThumbnailRequest) (*MultimediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VideoThumbnail not implemented")
}
func (UnimplementedMultimediaServiceServer) ImageThumbnail(context.Context, *ThumbnailRequest) (*MultimediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImageThumbnail not implemented")
}
func (UnimplementedMultimediaServiceServer) ImageSize(context.Context, *ImageSizeRequest) (*MultimediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImageSize not implemented")
}
func (UnimplementedMultimediaServiceServer) ImageResize(context.Context, *ImageResizeRequest) (*MultimediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImageResize not implemented")
}
func (UnimplementedMultimediaServiceServer) mustEmbedUnimplementedMultimediaServiceServer() {}
func (UnimplementedMultimediaServiceServer) testEmbeddedByValue()                           {}

// UnsafeMultimediaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MultimediaServiceServer will
// result in compilation errors.
type UnsafeMultimediaServiceServer interface {
	mustEmbedUnimplementedMultimediaServiceServer()
}

func RegisterMultimediaServiceServer(s grpc.ServiceRegistrar, srv MultimediaServiceServer) {
	// If the following call pancis, it indicates UnimplementedMultimediaServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MultimediaService_ServiceDesc, srv)
}

func _MultimediaService_VideoFrame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoFrameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultimediaServiceServer).VideoFrame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultimediaService_VideoFrame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultimediaServiceServer).VideoFrame(ctx, req.(*VideoFrameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultimediaService_VideoThumbnail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThumbnailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultimediaServiceServer).VideoThumbnail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultimediaService_VideoThumbnail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultimediaServiceServer).VideoThumbnail(ctx, req.(*ThumbnailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultimediaService_ImageThumbnail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThumbnailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultimediaServiceServer).ImageThumbnail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultimediaService_ImageThumbnail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultimediaServiceServer).ImageThumbnail(ctx, req.(*ThumbnailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultimediaService_ImageSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultimediaServiceServer).ImageSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultimediaService_ImageSize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultimediaServiceServer).ImageSize(ctx, req.(*ImageSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultimediaService_ImageResize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageResizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultimediaServiceServer).ImageResize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultimediaService_ImageResize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultimediaServiceServer).ImageResize(ctx, req.(*ImageResizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MultimediaService_ServiceDesc is the grpc.ServiceDesc for MultimediaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MultimediaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protocols.MultimediaService",
	HandlerType: (*MultimediaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VideoFrame",
			Handler:    _MultimediaService_VideoFrame_Handler,
		},
		{
			MethodName: "VideoThumbnail",
			Handler:    _MultimediaService_VideoThumbnail_Handler,
		},
		{
			MethodName: "ImageThumbnail",
			Handler:    _MultimediaService_ImageThumbnail_Handler,
		},
		{
			MethodName: "ImageSize",
			Handler:    _MultimediaService_ImageSize_Handler,
		},
		{
			MethodName: "ImageResize",
			Handler:    _MultimediaService_ImageResize_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/multimedia/protocols/multimedia.proto",
}
