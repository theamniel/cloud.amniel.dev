// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: services/datastore/protocols/datastore.proto

package protocols

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DataService_AddFile_FullMethodName       = "/protocols.DataService/AddFile"
	DataService_GetFiles_FullMethodName      = "/protocols.DataService/GetFiles"
	DataService_GetFile_FullMethodName       = "/protocols.DataService/GetFile"
	DataService_DeleteFile_FullMethodName    = "/protocols.DataService/DeleteFile"
	DataService_AddBan_FullMethodName        = "/protocols.DataService/AddBan"
	DataService_GetBans_FullMethodName       = "/protocols.DataService/GetBans"
	DataService_GetBan_FullMethodName        = "/protocols.DataService/GetBan"
	DataService_DeleteBan_FullMethodName     = "/protocols.DataService/DeleteBan"
	DataService_AddShort_FullMethodName      = "/protocols.DataService/AddShort"
	DataService_GetShort_FullMethodName      = "/protocols.DataService/GetShort"
	DataService_GetShorts_FullMethodName     = "/protocols.DataService/GetShorts"
	DataService_DeleteShort_FullMethodName   = "/protocols.DataService/DeleteShort"
	DataService_AddTraffic_FullMethodName    = "/protocols.DataService/AddTraffic"
	DataService_GetTraffics_FullMethodName   = "/protocols.DataService/GetTraffics"
	DataService_GetTraffic_FullMethodName    = "/protocols.DataService/GetTraffic"
	DataService_DeleteTraffic_FullMethodName = "/protocols.DataService/DeleteTraffic"
	DataService_UpdateTraffic_FullMethodName = "/protocols.DataService/UpdateTraffic"
)

// DataServiceClient is the client API for DataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataServiceClient interface {
	// File
	AddFile(ctx context.Context, in *File, opts ...grpc.CallOption) (*InsertedResult, error)
	GetFiles(ctx context.Context, in *EmptyQuery, opts ...grpc.CallOption) (*ListFile, error)
	GetFile(ctx context.Context, in *SearchFile, opts ...grpc.CallOption) (*FileResponse, error)
	DeleteFile(ctx context.Context, in *SearchFile, opts ...grpc.CallOption) (*DeleteResult, error)
	// Bans
	AddBan(ctx context.Context, in *Ban, opts ...grpc.CallOption) (*InsertedResult, error)
	GetBans(ctx context.Context, in *EmptyQuery, opts ...grpc.CallOption) (*ListBan, error)
	GetBan(ctx context.Context, in *SearchBan, opts ...grpc.CallOption) (*BanResponse, error)
	DeleteBan(ctx context.Context, in *SearchBan, opts ...grpc.CallOption) (*DeleteResult, error)
	// shortener
	AddShort(ctx context.Context, in *Short, opts ...grpc.CallOption) (*InsertedResult, error)
	GetShort(ctx context.Context, in *SearchShort, opts ...grpc.CallOption) (*ShortResponse, error)
	GetShorts(ctx context.Context, in *EmptyQuery, opts ...grpc.CallOption) (*ListShort, error)
	DeleteShort(ctx context.Context, in *SearchShort, opts ...grpc.CallOption) (*DeleteResult, error)
	// traffic
	AddTraffic(ctx context.Context, in *Traffic, opts ...grpc.CallOption) (*InsertedResult, error)
	GetTraffics(ctx context.Context, in *EmptyQuery, opts ...grpc.CallOption) (*ListTraffic, error)
	GetTraffic(ctx context.Context, in *Query, opts ...grpc.CallOption) (*ListTraffic, error)
	DeleteTraffic(ctx context.Context, in *Query, opts ...grpc.CallOption) (*DeleteResult, error)
	UpdateTraffic(ctx context.Context, in *UpdateTraffic, opts ...grpc.CallOption) (*UpdateResult, error)
}

type dataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataServiceClient(cc grpc.ClientConnInterface) DataServiceClient {
	return &dataServiceClient{cc}
}

func (c *dataServiceClient) AddFile(ctx context.Context, in *File, opts ...grpc.CallOption) (*InsertedResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InsertedResult)
	err := c.cc.Invoke(ctx, DataService_AddFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) GetFiles(ctx context.Context, in *EmptyQuery, opts ...grpc.CallOption) (*ListFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFile)
	err := c.cc.Invoke(ctx, DataService_GetFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) GetFile(ctx context.Context, in *SearchFile, opts ...grpc.CallOption) (*FileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileResponse)
	err := c.cc.Invoke(ctx, DataService_GetFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) DeleteFile(ctx context.Context, in *SearchFile, opts ...grpc.CallOption) (*DeleteResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResult)
	err := c.cc.Invoke(ctx, DataService_DeleteFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) AddBan(ctx context.Context, in *Ban, opts ...grpc.CallOption) (*InsertedResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InsertedResult)
	err := c.cc.Invoke(ctx, DataService_AddBan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) GetBans(ctx context.Context, in *EmptyQuery, opts ...grpc.CallOption) (*ListBan, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBan)
	err := c.cc.Invoke(ctx, DataService_GetBans_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) GetBan(ctx context.Context, in *SearchBan, opts ...grpc.CallOption) (*BanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BanResponse)
	err := c.cc.Invoke(ctx, DataService_GetBan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) DeleteBan(ctx context.Context, in *SearchBan, opts ...grpc.CallOption) (*DeleteResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResult)
	err := c.cc.Invoke(ctx, DataService_DeleteBan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) AddShort(ctx context.Context, in *Short, opts ...grpc.CallOption) (*InsertedResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InsertedResult)
	err := c.cc.Invoke(ctx, DataService_AddShort_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) GetShort(ctx context.Context, in *SearchShort, opts ...grpc.CallOption) (*ShortResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShortResponse)
	err := c.cc.Invoke(ctx, DataService_GetShort_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) GetShorts(ctx context.Context, in *EmptyQuery, opts ...grpc.CallOption) (*ListShort, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListShort)
	err := c.cc.Invoke(ctx, DataService_GetShorts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) DeleteShort(ctx context.Context, in *SearchShort, opts ...grpc.CallOption) (*DeleteResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResult)
	err := c.cc.Invoke(ctx, DataService_DeleteShort_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) AddTraffic(ctx context.Context, in *Traffic, opts ...grpc.CallOption) (*InsertedResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InsertedResult)
	err := c.cc.Invoke(ctx, DataService_AddTraffic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) GetTraffics(ctx context.Context, in *EmptyQuery, opts ...grpc.CallOption) (*ListTraffic, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTraffic)
	err := c.cc.Invoke(ctx, DataService_GetTraffics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) GetTraffic(ctx context.Context, in *Query, opts ...grpc.CallOption) (*ListTraffic, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTraffic)
	err := c.cc.Invoke(ctx, DataService_GetTraffic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) DeleteTraffic(ctx context.Context, in *Query, opts ...grpc.CallOption) (*DeleteResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResult)
	err := c.cc.Invoke(ctx, DataService_DeleteTraffic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) UpdateTraffic(ctx context.Context, in *UpdateTraffic, opts ...grpc.CallOption) (*UpdateResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateResult)
	err := c.cc.Invoke(ctx, DataService_UpdateTraffic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataServiceServer is the server API for DataService service.
// All implementations must embed UnimplementedDataServiceServer
// for forward compatibility.
type DataServiceServer interface {
	// File
	AddFile(context.Context, *File) (*InsertedResult, error)
	GetFiles(context.Context, *EmptyQuery) (*ListFile, error)
	GetFile(context.Context, *SearchFile) (*FileResponse, error)
	DeleteFile(context.Context, *SearchFile) (*DeleteResult, error)
	// Bans
	AddBan(context.Context, *Ban) (*InsertedResult, error)
	GetBans(context.Context, *EmptyQuery) (*ListBan, error)
	GetBan(context.Context, *SearchBan) (*BanResponse, error)
	DeleteBan(context.Context, *SearchBan) (*DeleteResult, error)
	// shortener
	AddShort(context.Context, *Short) (*InsertedResult, error)
	GetShort(context.Context, *SearchShort) (*ShortResponse, error)
	GetShorts(context.Context, *EmptyQuery) (*ListShort, error)
	DeleteShort(context.Context, *SearchShort) (*DeleteResult, error)
	// traffic
	AddTraffic(context.Context, *Traffic) (*InsertedResult, error)
	GetTraffics(context.Context, *EmptyQuery) (*ListTraffic, error)
	GetTraffic(context.Context, *Query) (*ListTraffic, error)
	DeleteTraffic(context.Context, *Query) (*DeleteResult, error)
	UpdateTraffic(context.Context, *UpdateTraffic) (*UpdateResult, error)
	mustEmbedUnimplementedDataServiceServer()
}

// UnimplementedDataServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDataServiceServer struct{}

func (UnimplementedDataServiceServer) AddFile(context.Context, *File) (*InsertedResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFile not implemented")
}
func (UnimplementedDataServiceServer) GetFiles(context.Context, *EmptyQuery) (*ListFile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFiles not implemented")
}
func (UnimplementedDataServiceServer) GetFile(context.Context, *SearchFile) (*FileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFile not implemented")
}
func (UnimplementedDataServiceServer) DeleteFile(context.Context, *SearchFile) (*DeleteResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedDataServiceServer) AddBan(context.Context, *Ban) (*InsertedResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBan not implemented")
}
func (UnimplementedDataServiceServer) GetBans(context.Context, *EmptyQuery) (*ListBan, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBans not implemented")
}
func (UnimplementedDataServiceServer) GetBan(context.Context, *SearchBan) (*BanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBan not implemented")
}
func (UnimplementedDataServiceServer) DeleteBan(context.Context, *SearchBan) (*DeleteResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBan not implemented")
}
func (UnimplementedDataServiceServer) AddShort(context.Context, *Short) (*InsertedResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddShort not implemented")
}
func (UnimplementedDataServiceServer) GetShort(context.Context, *SearchShort) (*ShortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShort not implemented")
}
func (UnimplementedDataServiceServer) GetShorts(context.Context, *EmptyQuery) (*ListShort, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShorts not implemented")
}
func (UnimplementedDataServiceServer) DeleteShort(context.Context, *SearchShort) (*DeleteResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShort not implemented")
}
func (UnimplementedDataServiceServer) AddTraffic(context.Context, *Traffic) (*InsertedResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTraffic not implemented")
}
func (UnimplementedDataServiceServer) GetTraffics(context.Context, *EmptyQuery) (*ListTraffic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTraffics not implemented")
}
func (UnimplementedDataServiceServer) GetTraffic(context.Context, *Query) (*ListTraffic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTraffic not implemented")
}
func (UnimplementedDataServiceServer) DeleteTraffic(context.Context, *Query) (*DeleteResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTraffic not implemented")
}
func (UnimplementedDataServiceServer) UpdateTraffic(context.Context, *UpdateTraffic) (*UpdateResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTraffic not implemented")
}
func (UnimplementedDataServiceServer) mustEmbedUnimplementedDataServiceServer() {}
func (UnimplementedDataServiceServer) testEmbeddedByValue()                     {}

// UnsafeDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataServiceServer will
// result in compilation errors.
type UnsafeDataServiceServer interface {
	mustEmbedUnimplementedDataServiceServer()
}

func RegisterDataServiceServer(s grpc.ServiceRegistrar, srv DataServiceServer) {
	// If the following call pancis, it indicates UnimplementedDataServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DataService_ServiceDesc, srv)
}

func _DataService_AddFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(File)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).AddFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_AddFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).AddFile(ctx, req.(*File))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_GetFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).GetFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_GetFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).GetFiles(ctx, req.(*EmptyQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_GetFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).GetFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_GetFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).GetFile(ctx, req.(*SearchFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_DeleteFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).DeleteFile(ctx, req.(*SearchFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_AddBan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ban)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).AddBan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_AddBan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).AddBan(ctx, req.(*Ban))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_GetBans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).GetBans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_GetBans_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).GetBans(ctx, req.(*EmptyQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_GetBan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchBan)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).GetBan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_GetBan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).GetBan(ctx, req.(*SearchBan))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_DeleteBan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchBan)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).DeleteBan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_DeleteBan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).DeleteBan(ctx, req.(*SearchBan))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_AddShort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Short)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).AddShort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_AddShort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).AddShort(ctx, req.(*Short))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_GetShort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchShort)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).GetShort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_GetShort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).GetShort(ctx, req.(*SearchShort))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_GetShorts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).GetShorts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_GetShorts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).GetShorts(ctx, req.(*EmptyQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_DeleteShort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchShort)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).DeleteShort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_DeleteShort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).DeleteShort(ctx, req.(*SearchShort))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_AddTraffic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Traffic)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).AddTraffic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_AddTraffic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).AddTraffic(ctx, req.(*Traffic))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_GetTraffics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).GetTraffics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_GetTraffics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).GetTraffics(ctx, req.(*EmptyQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_GetTraffic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).GetTraffic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_GetTraffic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).GetTraffic(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_DeleteTraffic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).DeleteTraffic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_DeleteTraffic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).DeleteTraffic(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_UpdateTraffic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTraffic)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).UpdateTraffic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_UpdateTraffic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).UpdateTraffic(ctx, req.(*UpdateTraffic))
	}
	return interceptor(ctx, in, info, handler)
}

// DataService_ServiceDesc is the grpc.ServiceDesc for DataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protocols.DataService",
	HandlerType: (*DataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddFile",
			Handler:    _DataService_AddFile_Handler,
		},
		{
			MethodName: "GetFiles",
			Handler:    _DataService_GetFiles_Handler,
		},
		{
			MethodName: "GetFile",
			Handler:    _DataService_GetFile_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _DataService_DeleteFile_Handler,
		},
		{
			MethodName: "AddBan",
			Handler:    _DataService_AddBan_Handler,
		},
		{
			MethodName: "GetBans",
			Handler:    _DataService_GetBans_Handler,
		},
		{
			MethodName: "GetBan",
			Handler:    _DataService_GetBan_Handler,
		},
		{
			MethodName: "DeleteBan",
			Handler:    _DataService_DeleteBan_Handler,
		},
		{
			MethodName: "AddShort",
			Handler:    _DataService_AddShort_Handler,
		},
		{
			MethodName: "GetShort",
			Handler:    _DataService_GetShort_Handler,
		},
		{
			MethodName: "GetShorts",
			Handler:    _DataService_GetShorts_Handler,
		},
		{
			MethodName: "DeleteShort",
			Handler:    _DataService_DeleteShort_Handler,
		},
		{
			MethodName: "AddTraffic",
			Handler:    _DataService_AddTraffic_Handler,
		},
		{
			MethodName: "GetTraffics",
			Handler:    _DataService_GetTraffics_Handler,
		},
		{
			MethodName: "GetTraffic",
			Handler:    _DataService_GetTraffic_Handler,
		},
		{
			MethodName: "DeleteTraffic",
			Handler:    _DataService_DeleteTraffic_Handler,
		},
		{
			MethodName: "UpdateTraffic",
			Handler:    _DataService_UpdateTraffic_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/datastore/protocols/datastore.proto",
}
